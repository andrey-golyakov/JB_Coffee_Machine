type: edu
custom_name: stage6
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import machine.MainKt;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(MainKt.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Main.kt
  visible: true
  text: |-
    package machine
    import java.util.*

    fun printResult(water: Int, milk: Int, beans: Int, cups:Int, money: Int): String {
        val str = "\nThe coffee machine has:\n" +
                "$water of water\n" +
                "$milk of milk\n" +
                "$beans of coffee beans\n" +
                "$cups of disposable cups\n" +
                "$money of money"
        return str
    }
    fun action(): String {
        val scanner = Scanner(System.`in`)
        print("\nWrite action (buy, fill, take, remaining, exit): ")
        return scanner.nextLine()
    }

    fun main() {
        val scanner = Scanner(System.`in`)
        var (hasWater, hasMilk, hasBeans, hasCups, hasMoney) = arrayOf(400, 540, 120, 9, 550)
        val (espressoWater, espressoBeans, espressoMoney) = arrayOf(250, 16, 4)
        val (latteWater, latteMilk, latteBeans, latteMoney) = arrayOf(350, 75, 20, 7)
        val (cappuccinoWater, cappuccinoMilk, cappuccinoBeans, cappuccinoMoney) = arrayOf(200, 100, 12, 6)
        var action = action()

        while (action !== "") {
            when (action) {
                "buy" -> {
                    print("\nWhat do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: ")
                    val whatBuy = scanner.nextLine()
                    when (whatBuy) {
                        "1" -> {
                            if (hasWater >= espressoWater && hasBeans >= espressoBeans && hasCups > 0) {
                                println("I have enough resources, making you a coffee!")
                                hasWater -= espressoWater
                                hasBeans -= espressoBeans
                                hasCups--
                                hasMoney += espressoMoney
                            } else if (hasWater < espressoWater) {
                                println("Sorry, not enough water!")
                            } else if (hasBeans < espressoBeans) {
                                println("Sorry, not enough coffee beans!")
                            } else {
                                println("Sorry, not enough cups!")
                            }
                            action = action()
                        }
                        "2" -> {
                            if (hasWater >= latteWater && hasBeans >= latteBeans && hasMilk >= latteMilk && hasCups > 0) {
                                println("I have enough resources, making you a coffee!")
                                hasWater -= latteWater
                                hasBeans -= latteBeans
                                hasMilk -= latteMilk
                                hasCups--
                                hasMoney += latteMoney
                            } else if (hasWater < latteWater) {
                                println("Sorry, not enough water!")
                            } else if (hasBeans < latteBeans) {
                                println("Sorry, not enough coffee beans!")
                            } else if (hasMilk < latteMilk) {
                                println("Sorry, not enough milk!")
                            } else {
                                println("Sorry, not enough cups!")
                            }
                            action = action()
                        }
                        "3" -> {
                            if (hasWater >= cappuccinoWater && hasBeans >= cappuccinoBeans && hasMilk >= cappuccinoMilk && hasCups > 0) {
                                println("I have enough resources, making you a coffee!")
                                hasWater -= cappuccinoWater
                                hasBeans -= cappuccinoBeans
                                hasMilk -= cappuccinoMilk
                                hasCups--
                                hasMoney += cappuccinoMoney
                            } else if (hasWater < cappuccinoWater) {
                                println("Sorry, not enough water!")
                            } else if (hasBeans < cappuccinoBeans) {
                                println("Sorry, not enough coffee beans!")
                            } else if (hasMilk < cappuccinoMilk) {
                                println("Sorry, not enough milk!")
                            } else {
                                println("Sorry, not enough cups!")
                            }
                            action = action()
                        }
                        "back" -> action = action()
                    }
                }
                "fill" -> {
                    print("\nWrite how many ml of water do you want to add: ")
                    val howWaterFill = scanner.nextInt()
                    print("Write how many ml of milk do you want to add: ")
                    val howMilkFill = scanner.nextInt()
                    print("Write how many grams of coffee beans do you want to add: ")
                    val howBeansFill = scanner.nextInt()
                    print("Write how many disposable cups of coffee do you want to add: ")
                    val howCupsFill = scanner.nextInt()
                    hasWater += howWaterFill
                    hasMilk += howMilkFill
                    hasBeans += howBeansFill
                    hasCups += howCupsFill
                    action = action()
                }
                "take" -> {
                    println("\nI gave you \$$hasMoney")
                    hasMoney -= hasMoney
                    action = action()
                }
                "remaining" -> {
                    println(printResult(hasWater, hasMilk, hasBeans, hasCups, hasMoney))
                    action = action()
                }
                "exit" -> {
                    action = ""
                }
                else -> action = ""
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/67/stages/365/implement
status: Solved
record: -1
